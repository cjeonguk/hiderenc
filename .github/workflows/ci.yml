# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16
        cache: 'yarn'
        
    - run: yarn install --frozen-lockfile
    - run: yarn webpack
    - run: yarn dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: yarn dist:mac-arm64
    
    - id: set_var
      run: |
        content=`cat ./path/to/package.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson::$content"
      
    - name: Create tag
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ fromJson(steps.set_var.outputs.packageJson).version }}',
            sha: context.sha
          })

    - name: Create CHANGELOG.md
      id: set_changelog
      run: |
        echo "# ${{ fromJson(steps.set_var.outputs.packageJson).version }} ($(date +'%Y-%m-%d'))\n\n" > CHANGELOG.md
        git log --format=%s v${{ fromJson(steps.set_var.outputs.packageJson).version }} | sed 's/\n/\n* /g' >> CHANGELOG.md
        echo "::set-output name=changelog::$(cat CHANGELOG.md)"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ fromJson(steps.set_var.outputs.packageJson).version }}
        release_name: Release ${{ fromJson(steps.set_var.outputs.packageJson).version }}
        body: ${{ steps.set_changelog.outputs.changelog }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: './dist/Hider Setup ${{ fromJson(steps.set_var.outputs.packageJson).version }}.exe'
        asset_name: 'Hider Setup ${{ fromJson(steps.set_var.outputs.packageJson).version }}.exe'
        asset_content_type: application/exe

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: './dist/hider-${{ fromJson(steps.set_var.outputs.packageJson).version }}.zip'
        asset_name: 'hider-${{ fromJson(steps.set_var.outputs.packageJson).version }}.zip'
        asset_content_type: application/zip
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: './dist/Hider-${{ fromJson(steps.set_var.outputs.packageJson).version }}.dmg'
        asset_name: 'Hider-${{ fromJson(steps.set_var.outputs.packageJson).version }}.dmg'
        asset_content_type: application/dmg
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: './dist/Hider-${{ fromJson(steps.set_var.outputs.packageJson).version }}-arm64.dmg'
        asset_name: 'Hider-${{ fromJson(steps.set_var.outputs.packageJson) }}-arm64.dmg'
        asset_content_type: application/dmg
